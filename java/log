# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.javaUtilListOf010

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 146053672,304 ops/s
# Warmup Iteration   2: 147404451,009 ops/s
# Warmup Iteration   3: 147153449,828 ops/s
# Warmup Iteration   4: 147030721,934 ops/s
# Warmup Iteration   5: 146957900,506 ops/s
Iteration   1: 143763447,638 ops/s
Iteration   2: 146577287,227 ops/s
Iteration   3: 146600973,980 ops/s
Iteration   4: 135524217,709 ops/s
Iteration   5: 130264844,174 ops/s


Result "org.sample.JavaBenchmark.javaUtilListOf010":
  140546154,146 ±(99.9%) 28185527,775 ops/s [Average]
  (min, avg, max) = (130264844,174, 140546154,146, 146600973,980), stdev = 7319692,056
  CI (99.9%): [112360626,371, 168731681,921] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.kotlinListOfVararg010

# Run progress: 50,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 106284051,605 ops/s
# Warmup Iteration   2: 115231714,702 ops/s
# Warmup Iteration   3: 109418841,950 ops/s
# Warmup Iteration   4: 109286972,001 ops/s
# Warmup Iteration   5: 109336227,304 ops/s
Iteration   1: 109379273,793 ops/s
Iteration   2: 109293724,819 ops/s
Iteration   3: 109405552,966 ops/s
Iteration   4: 109313377,034 ops/s
Iteration   5: 109221523,350 ops/s


Result "org.sample.JavaBenchmark.kotlinListOfVararg010":
  109322690,392 ±(99.9%) 280518,821 ops/s [Average]
  (min, avg, max) = (109221523,350, 109322690,392, 109405552,966), stdev = 72849,847
  CI (99.9%): [109042171,571, 109603209,213] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt          Score          Error  Units
JavaBenchmark.javaUtilListOf010      thrpt    5  140546154,146 ± 28185527,775  ops/s
JavaBenchmark.kotlinListOfVararg010  thrpt    5  109322690,392 ±   280518,821  ops/s
