# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.javaUtilListOf010

# Run progress: 0,00% complete, ETA 00:06:40
# Fork: 1 of 2
# Warmup Iteration   1: 146499365,692 ops/s
# Warmup Iteration   2: 148162184,252 ops/s
# Warmup Iteration   3: 147018989,889 ops/s
# Warmup Iteration   4: 146965836,773 ops/s
# Warmup Iteration   5: 147159656,468 ops/s
Iteration   1: 147055415,568 ops/s
Iteration   2: 147170949,593 ops/s
Iteration   3: 147063412,741 ops/s
Iteration   4: 147304104,708 ops/s
Iteration   5: 146986038,291 ops/s

# Run progress: 25,00% complete, ETA 00:05:00
# Fork: 2 of 2
# Warmup Iteration   1: 145512554,195 ops/s
# Warmup Iteration   2: 146748561,500 ops/s
# Warmup Iteration   3: 147014977,522 ops/s
# Warmup Iteration   4: 146894241,894 ops/s
# Warmup Iteration   5: 146976701,651 ops/s
Iteration   1: 146755702,002 ops/s
Iteration   2: 147006465,671 ops/s
Iteration   3: 146793023,226 ops/s
Iteration   4: 146895253,809 ops/s
Iteration   5: 146882877,790 ops/s


Result "org.sample.JavaBenchmark.javaUtilListOf010":
  146991324,340 ±(99.9%) 254727,810 ops/s [Average]
  (min, avg, max) = (146755702,002, 146991324,340, 147304104,708), stdev = 168486,674
  CI (99.9%): [146736596,530, 147246052,149] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.kotlinListOfVararg010

# Run progress: 50,00% complete, ETA 00:03:20
# Fork: 1 of 2
# Warmup Iteration   1: 124359619,154 ops/s
# Warmup Iteration   2: 125279186,917 ops/s
# Warmup Iteration   3: 112828165,623 ops/s
# Warmup Iteration   4: 112842961,965 ops/s
# Warmup Iteration   5: 112710336,537 ops/s
Iteration   1: 112759718,106 ops/s
Iteration   2: 112786458,733 ops/s
Iteration   3: 112737053,263 ops/s
Iteration   4: 112806811,761 ops/s
Iteration   5: 112846319,889 ops/s

# Run progress: 75,00% complete, ETA 00:01:40
# Fork: 2 of 2
# Warmup Iteration   1: 120284976,455 ops/s
# Warmup Iteration   2: 121433641,590 ops/s
# Warmup Iteration   3: 109469047,553 ops/s
# Warmup Iteration   4: 109163751,949 ops/s
# Warmup Iteration   5: 109358023,066 ops/s
Iteration   1: 109311205,121 ops/s
Iteration   2: 108787239,388 ops/s
Iteration   3: 109171948,724 ops/s
Iteration   4: 108905260,221 ops/s
Iteration   5: 106686428,257 ops/s


Result "org.sample.JavaBenchmark.kotlinListOfVararg010":
  110679844,346 ±(99.9%) 3529063,842 ops/s [Average]
  (min, avg, max) = (106686428,257, 110679844,346, 112846319,889), stdev = 2334257,226
  CI (99.9%): [107150780,504, 114208908,188] (assumes normal distribution)


# Run complete. Total time: 00:06:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt          Score         Error  Units
JavaBenchmark.javaUtilListOf010      thrpt   10  146991324,340 ±  254727,810  ops/s
JavaBenchmark.kotlinListOfVararg010  thrpt   10  110679844,346 ± 3529063,842  ops/s
