# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.javaUtilListOf010

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 145325497,177 ops/s
# Warmup Iteration   2: 147588832,542 ops/s
# Warmup Iteration   3: 147313835,206 ops/s
# Warmup Iteration   4: 146984297,846 ops/s
# Warmup Iteration   5: 147076304,662 ops/s
Iteration   1: 146956816,411 ops/s
Iteration   2: 146947706,721 ops/s
Iteration   3: 146895555,029 ops/s
Iteration   4: 147135599,035 ops/s
Iteration   5: 146843314,486 ops/s


Result "org.sample.JavaBenchmark.javaUtilListOf010":
  146955798,336 ±(99.9%) 424779,761 ops/s [Average]
  (min, avg, max) = (146843314,486, 146955798,336, 147135599,035), stdev = 110313,955
  CI (99.9%): [146531018,576, 147380578,097] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.kotlinListOfVararg010

# Run progress: 33,33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 120105677,539 ops/s
# Warmup Iteration   2: 121520280,891 ops/s
# Warmup Iteration   3: 109318167,767 ops/s
# Warmup Iteration   4: 109230507,845 ops/s
# Warmup Iteration   5: 108094176,691 ops/s
Iteration   1: 107916876,721 ops/s
Iteration   2: 109557771,928 ops/s
Iteration   3: 109482700,184 ops/s
Iteration   4: 109396381,519 ops/s
Iteration   5: 109443291,431 ops/s


Result "org.sample.JavaBenchmark.kotlinListOfVararg010":
  109159404,357 ±(99.9%) 2684317,194 ops/s [Average]
  (min, avg, max) = (107916876,721, 109159404,357, 109557771,928), stdev = 697108,651
  CI (99.9%): [106475087,163, 111843721,550] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.myJavaListMimicOf010

# Run progress: 66,67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 146890643,282 ops/s
# Warmup Iteration   2: 147268618,511 ops/s
# Warmup Iteration   3: 146599239,241 ops/s
# Warmup Iteration   4: 146198426,768 ops/s
# Warmup Iteration   5: 146053463,783 ops/s
Iteration   1: 145723030,220 ops/s
Iteration   2: 146219124,202 ops/s
Iteration   3: 145978772,623 ops/s
Iteration   4: 146185278,309 ops/s
Iteration   5: 145924738,789 ops/s


Result "org.sample.JavaBenchmark.myJavaListMimicOf010":
  146006188,829 ±(99.9%) 782019,875 ops/s [Average]
  (min, avg, max) = (145723030,220, 146006188,829, 146219124,202), stdev = 203088,078
  CI (99.9%): [145224168,954, 146788208,703] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt          Score         Error  Units
JavaBenchmark.javaUtilListOf010      thrpt    5  146955798,336 ±  424779,761  ops/s
JavaBenchmark.kotlinListOfVararg010  thrpt    5  109159404,357 ± 2684317,194  ops/s
JavaBenchmark.myJavaListMimicOf010   thrpt    5  146006188,829 ±  782019,875  ops/s
