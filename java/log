# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.arraysAsList010

# Run progress: 0,00% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 117796076,540 ops/s
# Warmup Iteration   2: 121555189,930 ops/s
# Warmup Iteration   3: 109240917,948 ops/s
# Warmup Iteration   4: 109279442,951 ops/s
# Warmup Iteration   5: 109237921,902 ops/s
Iteration   1: 109397071,056 ops/s
Iteration   2: 109204919,189 ops/s
Iteration   3: 109268202,061 ops/s
Iteration   4: 109276429,455 ops/s
Iteration   5: 109336508,985 ops/s


Result "org.sample.JavaBenchmark.arraysAsList010":
  109296626,149 ±(99.9%) 281029,888 ops/s [Average]
  (min, avg, max) = (109204919,189, 109296626,149, 109397071,056), stdev = 72982,570
  CI (99.9%): [109015596,261, 109577656,037] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.javaUtilListOf010

# Run progress: 25,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 145172338,676 ops/s
# Warmup Iteration   2: 147230846,574 ops/s
# Warmup Iteration   3: 146816877,898 ops/s
# Warmup Iteration   4: 147312818,500 ops/s
# Warmup Iteration   5: 147147341,801 ops/s
Iteration   1: 147218777,115 ops/s
Iteration   2: 147242455,666 ops/s
Iteration   3: 146971252,095 ops/s
Iteration   4: 147064140,502 ops/s
Iteration   5: 147140001,493 ops/s


Result "org.sample.JavaBenchmark.javaUtilListOf010":
  147127325,374 ±(99.9%) 431075,613 ops/s [Average]
  (min, avg, max) = (146971252,095, 147127325,374, 147242455,666), stdev = 111948,968
  CI (99.9%): [146696249,762, 147558400,987] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.kotlinListOfVararg010

# Run progress: 50,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 120319166,438 ops/s
# Warmup Iteration   2: 121400516,968 ops/s
# Warmup Iteration   3: 109364919,681 ops/s
# Warmup Iteration   4: 109240669,877 ops/s
# Warmup Iteration   5: 109166717,926 ops/s
Iteration   1: 109186332,935 ops/s
Iteration   2: 109411988,205 ops/s
Iteration   3: 109383983,965 ops/s
Iteration   4: 109531865,960 ops/s
Iteration   5: 109403212,711 ops/s


Result "org.sample.JavaBenchmark.kotlinListOfVararg010":
  109383476,755 ±(99.9%) 479740,281 ops/s [Average]
  (min, avg, max) = (109186332,935, 109383476,755, 109531865,960), stdev = 124587,028
  CI (99.9%): [108903736,474, 109863217,036] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.JavaBenchmark.myJavaListMimicOf010

# Run progress: 75,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 145840216,768 ops/s
# Warmup Iteration   2: 147307457,790 ops/s
# Warmup Iteration   3: 147345123,831 ops/s
# Warmup Iteration   4: 147257231,030 ops/s
# Warmup Iteration   5: 147208500,528 ops/s
Iteration   1: 147024678,504 ops/s
Iteration   2: 147329085,200 ops/s
Iteration   3: 147048177,458 ops/s
Iteration   4: 147117073,636 ops/s
Iteration   5: 147014490,832 ops/s


Result "org.sample.JavaBenchmark.myJavaListMimicOf010":
  147106701,126 ±(99.9%) 502865,695 ops/s [Average]
  (min, avg, max) = (147014490,832, 147106701,126, 147329085,200), stdev = 130592,624
  CI (99.9%): [146603835,431, 147609566,821] (assumes normal distribution)


# Run complete. Total time: 00:06:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt          Score        Error  Units
JavaBenchmark.arraysAsList010        thrpt    5  109296626,149 ± 281029,888  ops/s
JavaBenchmark.javaUtilListOf010      thrpt    5  147127325,374 ± 431075,613  ops/s
JavaBenchmark.kotlinListOfVararg010  thrpt    5  109383476,755 ± 479740,281  ops/s
JavaBenchmark.myJavaListMimicOf010   thrpt    5  147106701,126 ± 502865,695  ops/s
