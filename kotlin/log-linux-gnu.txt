# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /home/bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_intArrayOf

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 181130028.014 ops/s
# Warmup Iteration   2: 183055957.012 ops/s
# Warmup Iteration   3: 161769803.844 ops/s
# Warmup Iteration   4: 161773586.329 ops/s
# Warmup Iteration   5: 161868603.863 ops/s
Iteration   1: 161908647.042 ops/s
Iteration   2: 161920295.430 ops/s
Iteration   3: 161410931.748 ops/s
Iteration   4: 161617686.592 ops/s
Iteration   5: 161824826.856 ops/s


Result "org.sample.KotlinBenchmark._010_intArrayOf":
  161736477.533 ±(99.9%) 842156.841 ops/s [Average]
  (min, avg, max) = (161410931.748, 161736477.533, 161920295.430), stdev = 218705.457
  CI (99.9%): [160894320.693, 162578634.374] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /home/bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_intArrayOf_inter_vars

# Run progress: 50.00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 144429713.800 ops/s
# Warmup Iteration   2: 146269101.984 ops/s
# Warmup Iteration   3: 120413804.317 ops/s
# Warmup Iteration   4: 120422894.500 ops/s
# Warmup Iteration   5: 120517677.085 ops/s
Iteration   1: 120607285.821 ops/s
Iteration   2: 120437462.197 ops/s
Iteration   3: 120391570.995 ops/s
Iteration   4: 120579591.546 ops/s
Iteration   5: 120613615.990 ops/s


Result "org.sample.KotlinBenchmark._010_intArrayOf_inter_vars":
  120525905.310 ±(99.9%) 399549.795 ops/s [Average]
  (min, avg, max) = (120391570.995, 120525905.310, 120613615.990), stdev = 103761.813
  CI (99.9%): [120126355.515, 120925455.104] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                    Mode  Cnt          Score        Error  Units
KotlinBenchmark._010_intArrayOf             thrpt    5  161736477.533 ± 842156.841  ops/s
KotlinBenchmark._010_intArrayOf_inter_vars  thrpt    5  120525905.310 ± 399549.795  ops/s
