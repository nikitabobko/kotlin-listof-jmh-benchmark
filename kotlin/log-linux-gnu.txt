# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /home/bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_arr10

# Run progress: 0.00% complete, ETA 00:05:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 143198518.281 ops/s
# Warmup Iteration   2: 119661558.816 ops/s
# Warmup Iteration   3: 144841292.022 ops/s
# Warmup Iteration   4: 120019981.912 ops/s
# Warmup Iteration   5: 119974488.995 ops/s
Iteration   1: 119957194.547 ops/s
Iteration   2: 119803084.210 ops/s
Iteration   3: 120163903.811 ops/s
Iteration   4: 120030667.043 ops/s
Iteration   5: 119962013.787 ops/s
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.sample.KotlinBenchmark._010_arr10":
  119983372.680 Â±(99.9%) 503808.146 ops/s [Average]
  (min, avg, max) = (119803084.210, 119983372.680, 120163903.811), stdev = 130837.376
  CI (99.9%): [119479564.534, 120487180.826] (assumes normal distribution)

Secondary result "org.sample.KotlinBenchmark._010_arr10:asm":
PrintAssembly processed: 43013 total address lines.
Perf output processed (skipped 52.733 seconds):
 Column 1: cycles (50368 events)

Hottest code regions (>10.00% "cycles" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
c2, level 4, org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub, version 6, compile id 641 

                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@20 (line 121)
            0x0000768af80ff028: 004c 8b44 | 2468 450f | b690 9400 
            0x0000768af80ff034: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@30 (line 123)
            0x0000768af80ff034: 0000 4585 | d20f 855f | 0200 0041 | ba01 0000 | 004c 8944 | 2420 4c89 | 5c24 284c | 8954 2430 
            0x0000768af80ff054: e9dd 0000 | 000f 1f80 
            0x0000768af80ff05c: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
            0x0000768af80ff05c: 0000 0000 | 4d89 8fb8 | 0100 0041 | 0f0d 89c0 | 0000 0048 | c700 0100 | 0000 410f | 0d89 0001 
            0x0000768af80ff07c: ;   {metadata({type array int})}
            0x0000768af80ff07c: 0000 c740 | 0898 4e16 | 0041 0f0d | 8940 0100 | 00c7 400c | 0a00 0000 | 410f 0d89 | 8001 0000 
   1.93%    0x0000768af80ff09c: 4c89 6010 | 4c89 6018 | 4c89 6020 | 4c89 6028 
   1.80%    0x0000768af80ff0ac: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@2 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
   1.80%    0x0000768af80ff0ac: 4c89 6030 | 448b 5c24 | 7044 8958 
            0x0000768af80ff0b8: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@10 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0b8: 1089 6814 | 448b 5424 | 1844 8950 
            0x0000768af80ff0c4: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@20 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0c4: 1844 8b5c | 2414 4489 
            0x0000768af80ff0cc: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@25 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0cc: 581c 448b | 5424 1044 
            0x0000768af80ff0d4: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@31 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0d4: 8950 2044 | 8b5c 240c 
   0.12%    0x0000768af80ff0dc: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@37 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
   0.12%    0x0000768af80ff0dc: 4489 5824 | 448b 5424 | 0844 8950 
            0x0000768af80ff0e8: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@44 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0e8: 2844 8b5c | 2404 4489 
            0x0000768af80ff0f0: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@51 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0f0: 582c 448b | 1424 4489 
            0x0000768af80ff0f8: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmarkKt::arr10@58 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff0f8: 5030 448b | 5c24 7444 
            0x0000768af80ff100: ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@20 (line 121)
            0x0000768af80ff100: 8958 344c | 8b54 2420 | 450f b692 
            0x0000768af80ff10c: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@30 (line 123)
            0x0000768af80ff10c: 9400 0000 | 4c8b 5c24 | 3049 83c3 
            0x0000768af80ff118: ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@26 (line 122)
            0x0000768af80ff118: 014c 895c 
            0x0000768af80ff11c: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
            0x0000768af80ff11c: 2430 4d8b | 9f50 0400 
            0x0000768af80ff124: ; ImmutableOopMap {[32]=Oop [40]=Oop [96]=Oop [104]=Oop }
                                ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                ; - (reexecute) org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
                                ;   {poll}
            0x0000768af80ff124: 0041 8503 | 4585 d20f | 85ac 0000 
            0x0000768af80ff130: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
            0x0000768af80ff130: 004c 8b6c 
            0x0000768af80ff134: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@36 (line 124)
            0x0000768af80ff134: 2468 458b 
            0x0000768af80ff138: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
            0x0000768af80ff138: 450c 498b | 87b8 0100 | 004c 8bc8 | 4983 c138 | 458d 5009 | 4489 5424 | 7445 8d58 | 0a45 895d 
            0x0000768af80ff158: ;*putfield y {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@9 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_arr10@37 (line 453)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff158: 0c4c 896c | 2468 458d | 5008 4489 | 1424 458d | 5807 4489 | 5c24 0445 | 8d50 0644 | 8954 2408 
   2.01%    0x0000768af80ff178: 458d 5005 | 4489 5424 | 0c45 8d58 | 0444 895c | 2410 4489 | 4424 7041 
            0x0000768af80ff190: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@8 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_arr10@9 (line 446)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff190: 83c0 0344 | 8944 2414 | 448b 5c24 | 7041 83c3 
            0x0000768af80ff1a0: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@8 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_arr10@5 (line 445)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
            0x0000768af80ff1a0: 0244 895c | 2418 8b6c 
            0x0000768af80ff1a8: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@33 (line 123)
            0x0000768af80ff1a8: 2470 ffc5 | 4d3b 8fc8 | 0100 000f | 82a7 feff 
            0x0000768af80ff1b8: ;*synchronization entry
                                ; - org.sample.KotlinBenchmarkKt::arr10@-1 (line 460)
                                ; - org.sample.KotlinBenchmark::_010_arr10@40 (line 443)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub@17 (line 121)
                                ;   {metadata({type array int})}
            0x0000768af80ff1b8: ff48 be98 | 4e16 868a | 7600 00ba | 0a00 0000 
            0x0000768af80ff1c8: ;   {runtime_call _new_array_Java}
            0x0000768af80ff1c8: 6666 90e8 
            0x0000768af80ff1cc: ; ImmutableOopMap {[32]=Oop [40]=Oop [96]=Oop [104]=Oop }
                                ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                ; - org.sample.KotlinBenchmarkKt::arr10@2 (line 460)
....................................................................................................
  98.64%  <total for region 1>

....[Hottest Regions]...............................................................................
  98.64%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub, version 6, compile id 641 
   0.07%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.07%                        <unknown> 
   0.06%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.04%                [vdso]  __vdso_clock_gettime 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.04%             libjvm.so  SpinPause 
   0.04%                        <unknown> 
   0.03%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.03%                        <unknown> 
   0.03%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.02%             libjvm.so  G1FromCardCache::clear(unsigned int) 
   0.02%             libjvm.so  G1ConcurrentMark::clear_statistics(G1HeapRegion*) 
   0.02%             libjvm.so  TypeArrayKlass::allocate_common(int, bool, JavaThread*) 
   0.01%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.01%             libjvm.so  G1CodeRootSet::nmethods_do(NMethodClosure*) const 
   0.01%             libjvm.so  Rdtsc::elapsed_counter() 
   0.01%                        <unknown> 
   0.01%                kernel  [unknown] 
   0.75%  <...other 253 warm regions...>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  98.64%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_arr10_jmhTest::_010_arr10_thrpt_jmhStub, version 6, compile id 641 
   0.30%                        <unknown> 
   0.07%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.06%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.06%                [vdso]  __vdso_clock_gettime 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.04%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.04%             libjvm.so  SpinPause 
   0.03%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  G1FromCardCache::clear(unsigned int) 
   0.03%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.03%             libc.so.6  [unknown] 
   0.02%             libjvm.so  G1ConcurrentMark::clear_statistics(G1HeapRegion*) 
   0.02%             libjvm.so  TypeArrayKlass::allocate_common(int, bool, JavaThread*) 
   0.02%             libjvm.so  void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) 
   0.02%             libjvm.so  G1CollectedHeap::par_iterate_regions_array(HeapRegionClosure*, HeapRegionClaimer*, unsigned int const*, unsigned long, unsigned int) const 
   0.01%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.01%             libjvm.so  G1CodeRootSet::nmethods_do(NMethodClosure*) const 
   0.01%             libc.so.6  _IO_fwrite 
   0.01%             libjvm.so  Rdtsc::elapsed_counter() 
   0.50%  <...other 160 warm methods...>
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  98.64%           c2, level 4
   0.88%             libjvm.so
   0.30%                      
   0.09%             libc.so.6
   0.06%                [vdso]
   0.01%                kernel
   0.01%           interpreter
   0.01%  ld-linux-x86-64.so.2
....................................................................................................
 100.00%  <totals>



# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /home/bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_varargArr

# Run progress: 33.33% complete, ETA 00:03:27
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 179371765.147 ops/s
# Warmup Iteration   2: 181877277.348 ops/s
# Warmup Iteration   3: 161142350.905 ops/s
# Warmup Iteration   4: 160776628.711 ops/s
# Warmup Iteration   5: 160936978.615 ops/s
Iteration   1: 161039443.865 ops/s
Iteration   2: 160577808.650 ops/s
Iteration   3: 160944434.696 ops/s
Iteration   4: 161218773.469 ops/s
Iteration   5: 160008211.919 ops/s
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.sample.KotlinBenchmark._010_varargArr":
  160757734.520 Â±(99.9%) 1847638.582 ops/s [Average]
  (min, avg, max) = (160008211.919, 160757734.520, 161218773.469), stdev = 479825.872
  CI (99.9%): [158910095.938, 162605373.102] (assumes normal distribution)

Secondary result "org.sample.KotlinBenchmark._010_varargArr:asm":
PrintAssembly processed: 40583 total address lines.
Perf output processed (skipped 52.570 seconds):
 Column 1: cycles (50335 events)

Hottest code regions (>10.00% "cycles" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
c2, level 4, org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub, version 4, compile id 620 

                                ; - org.openjdk.jmh.infra.Blackhole::consume@7 (line 323)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@20 (line 121)
            0x00007b9db00fedb0: 004c 8b4c | 2448 450f | b699 9400 
            0x00007b9db00fedbc: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@30 (line 123)
            0x00007b9db00fedbc: 0000 6690 | 4585 db0f | 853c 0100 | 00bd 0100 | 0000 e9ed | 0000 0066 | 0f1f 8400 | 0000 0000 
            0x00007b9db00feddc: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@33 (line 123)
            0x00007b9db00feddc: 6666 6690 | 4d89 97b8 | 0100 0041 | 0f0d 8ac0 | 0000 0048 | c700 0100 | 0000 410f | 0d8a 0001 
            0x00007b9db00fedfc: ;   {metadata({type array int})}
            0x00007b9db00fedfc: 0000 c740 | 0898 4e16 | 0041 0f0d | 8a40 0100 | 00c7 400c | 0a00 0000 | 410f 0d8a | 8001 0000 
   3.64%    0x00007b9db00fee1c: 4c89 6010 | 4c89 6018 | 4c89 6020 | 4c89 6028 | 4c89 6030 | 4c89 4c24 | 484c 8904 
            0x00007b9db00fee38: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@2 (line 402)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee38: 244c 8b54 | 2448 450f | b6aa 9400 
            0x00007b9db00fee44: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@30 (line 123)
            0x00007b9db00fee44: 0000 4c8b | 5424 5045 
            0x00007b9db00fee4c: ;*getfield y {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@1 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_varargArr@8 (line 402)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee4c: 8b52 0c44 
            0x00007b9db00fee50: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@11 (line 402)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee50: 8950 1048 
            0x00007b9db00fee54: ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@26 (line 122)
            0x00007b9db00fee54: 83c5 0145 | 8d72 0945 | 8d42 0845 | 8d5a 0741 | 8d4a 0645 | 8d4a 0541 | 8d7a 0441 | 8d5a 0341 
            0x00007b9db00fee74: 8d72 0241 | 8bd2 ffc2 
   0.29%    0x00007b9db00fee7c: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@18 (line 403)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
   0.29%    0x00007b9db00fee7c: 8950 1489 
            0x00007b9db00fee80: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@25 (line 404)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee80: 7018 8958 
            0x00007b9db00fee84: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@32 (line 405)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee84: 1c89 7820 
   0.27%    0x00007b9db00fee88: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@46 (line 407)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
   0.27%    0x00007b9db00fee88: 4489 4824 
   1.24%    0x00007b9db00fee8c: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@54 (line 408)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
   1.24%    0x00007b9db00fee8c: 8948 2844 
            0x00007b9db00fee90: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@62 (line 409)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee90: 8958 2c44 
            0x00007b9db00fee94: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@70 (line 410)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee94: 8940 3044 
            0x00007b9db00fee98: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@78 (line 411)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00fee98: 8970 3441 | 83c2 0a4c | 8b5c 2450 
   0.42%    0x00007b9db00feea4: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@33 (line 123)
   0.42%    0x00007b9db00feea4: 4589 530c | 4d8b 9750 
            0x00007b9db00feeac: ; ImmutableOopMap {[0]=Oop [64]=Oop [72]=Oop [80]=Oop }
                                ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                ; - (reexecute) org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@33 (line 123)
                                ;   {poll}
            0x00007b9db00feeac: 0400 0041 | 8502 4585 | ed75 534c | 8b4c 2448 | 4c8b 0424 | 498b 87b8 | 0100 004c | 8bd0 4983 
            0x00007b9db00feecc: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@33 (line 123)
            0x00007b9db00feecc: c238 4d3b | 97c8 0100 | 000f 8205 | ffff ff4c | 8904 244c | 894c 2448 
            0x00007b9db00feee4: ;   {metadata({type array int})}
            0x00007b9db00feee4: 48be 984e | 1642 9d7b | 0000 ba0a 
            0x00007b9db00feef0: ;   {runtime_call _new_array_Java}
            0x00007b9db00feef0: 0000 00e8 
            0x00007b9db00feef4: ; ImmutableOopMap {[0]=Oop [64]=Oop [72]=Oop [80]=Oop }
                                ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                ; - org.sample.KotlinBenchmark::_010_varargArr@2 (line 402)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub@17 (line 121)
            0x00007b9db00feef4: e83d b5ff 
            0x00007b9db00feef8: ;   {other}
            0x00007b9db00feef8: 0f1f 8400 
....................................................................................................
  98.49%  <total for region 1>

....[Hottest Regions]...............................................................................
  98.49%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub, version 4, compile id 620 
   0.10%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.09%                        <unknown> 
   0.06%                [vdso]  __vdso_clock_gettime 
   0.05%             libjvm.so  SpinPause 
   0.04%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.03%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.02%                kernel  [unknown] 
   0.02%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.02%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.02%  ld-linux-x86-64.so.2  __tls_get_addr 
   0.02%                        <unknown> 
   0.02%             libjvm.so  Rdtsc::elapsed_counter() 
   0.02%             libjvm.so  SharedRuntime::on_slowpath_allocation_exit(JavaThread*) 
   0.02%             libjvm.so  G1FromCardCache::clear(unsigned int) 
   0.02%             libjvm.so  G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&) 
   0.02%             libjvm.so  HandleMark::initialize(Thread*) 
   0.02%                        <unknown> 
   0.85%  <...other 280 warm regions...>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  98.49%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_varargArr_jmhTest::_010_varargArr_thrpt_jmhStub, version 4, compile id 620 
   0.34%                        <unknown> 
   0.10%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.06%                [vdso]  __vdso_clock_gettime 
   0.05%             libjvm.so  SpinPause 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.04%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.03%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.02%  ld-linux-x86-64.so.2  __tls_get_addr 
   0.02%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.02%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.02%                kernel  [unknown] 
   0.02%             libjvm.so  Rdtsc::elapsed_counter() 
   0.02%             libjvm.so  SharedRuntime::on_slowpath_allocation_exit(JavaThread*) 
   0.02%             libjvm.so  G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&, TimeInterval<CompositeCounterRepresentation, CompositeElapsedCounterSource>&) 
   0.02%             libjvm.so  TypeArrayKlass::allocate_common(int, bool, JavaThread*) 
   0.02%             libjvm.so  HandleMark::initialize(Thread*) 
   0.02%             libc.so.6  clock_gettime 
   0.02%             libjvm.so  G1FromCardCache::clear(unsigned int) 
   0.61%  <...other 181 warm methods...>
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  98.49%           c2, level 4
   1.00%             libjvm.so
   0.34%                      
   0.06%                [vdso]
   0.06%             libc.so.6
   0.02%                kernel
   0.02%  ld-linux-x86-64.so.2
   0.00%           interpreter
....................................................................................................
 100.00%  <totals>



# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /home/bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_varargArr_inter_vars

# Run progress: 66.67% complete, ETA 00:01:43
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 142975855.860 ops/s
# Warmup Iteration   2: 120149199.916 ops/s
# Warmup Iteration   3: 145058849.778 ops/s
# Warmup Iteration   4: 120078592.837 ops/s
# Warmup Iteration   5: 120097730.965 ops/s
Iteration   1: 120185977.175 ops/s
Iteration   2: 119440346.787 ops/s
Iteration   3: 120153889.014 ops/s
Iteration   4: 120159021.718 ops/s
Iteration   5: 120169895.920 ops/s
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.sample.KotlinBenchmark._010_varargArr_inter_vars":
  120021826.123 Â±(99.9%) 1252572.046 ops/s [Average]
  (min, avg, max) = (119440346.787, 120021826.123, 120185977.175), stdev = 325288.983
  CI (99.9%): [118769254.077, 121274398.169] (assumes normal distribution)

Secondary result "org.sample.KotlinBenchmark._010_varargArr_inter_vars:asm":
PrintAssembly processed: 42150 total address lines.
Perf output processed (skipped 52.683 seconds):
 Column 1: cycles (50415 events)

Hottest code regions (>10.00% "cycles" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
c2, level 4, org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub, version 6, compile id 636 

                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@20 (line 121)
            0x00007591900feaa8: 004c 8b44 | 2468 450f | b690 9400 
            0x00007591900feab4: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@30 (line 123)
            0x00007591900feab4: 0000 4585 | d20f 858d | 0200 0041 | ba01 0000 | 004c 8944 | 2420 4c89 | 5c24 284c | 8954 2430 
            0x00007591900fead4: e9dd 0000 | 000f 1f80 
            0x00007591900feadc: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
            0x00007591900feadc: 0000 0000 | 4d89 8fb8 | 0100 0041 | 0f0d 89c0 | 0000 0048 | c700 0100 | 0000 410f | 0d89 0001 
            0x00007591900feafc: ;   {metadata({type array int})}
            0x00007591900feafc: 0000 c740 | 0898 4e16 | 0041 0f0d | 8940 0100 | 00c7 400c | 0a00 0000 | 410f 0d89 | 8001 0000 
   2.06%    0x00007591900feb1c: 4c89 6010 | 4c89 6018 | 4c89 6020 | 4c89 6028 
   1.71%    0x00007591900feb2c: ;*newarray {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@59 (line 428)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
   1.71%    0x00007591900feb2c: 4c89 6030 | 448b 5c24 | 7044 8958 
            0x00007591900feb38: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@67 (line 428)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb38: 1089 6814 | 448b 5424 | 1844 8950 
            0x00007591900feb44: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@77 (line 430)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb44: 1844 8b5c | 2414 4489 
            0x00007591900feb4c: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@83 (line 431)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb4c: 581c 448b | 5424 1044 
            0x00007591900feb54: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@89 (line 432)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb54: 8950 2044 | 8b5c 240c 
   0.12%    0x00007591900feb5c: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@95 (line 433)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
   0.12%    0x00007591900feb5c: 4489 5824 | 448b 5424 | 0844 8950 
            0x00007591900feb68: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@102 (line 434)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb68: 2844 8b5c | 2404 4489 
            0x00007591900feb70: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@109 (line 435)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb70: 582c 448b | 1424 4489 
            0x00007591900feb78: ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@116 (line 436)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900feb78: 5030 448b | 5c24 7444 
            0x00007591900feb80: ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@20 (line 121)
            0x00007591900feb80: 8958 344c | 8b54 2420 | 450f b692 
            0x00007591900feb8c: ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@30 (line 123)
            0x00007591900feb8c: 9400 0000 | 4c8b 5c24 | 3049 83c3 
            0x00007591900feb98: ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@26 (line 122)
            0x00007591900feb98: 014c 895c 
            0x00007591900feb9c: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
            0x00007591900feb9c: 2430 4d8b | 9f50 0400 
            0x00007591900feba4: ; ImmutableOopMap {[32]=Oop [40]=Oop [96]=Oop [104]=Oop }
                                ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                ; - (reexecute) org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
                                ;   {poll}
            0x00007591900feba4: 0041 8503 | 4585 d20f | 85ac 0000 
            0x00007591900febb0: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
            0x00007591900febb0: 004c 8b6c 
            0x00007591900febb4: ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@36 (line 124)
            0x00007591900febb4: 2468 458b 
            0x00007591900febb8: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
            0x00007591900febb8: 450c 498b | 87b8 0100 | 004c 8bc8 | 4983 c138 | 458d 5009 | 4489 5424 | 7445 8d58 | 0a45 895d 
            0x00007591900febd8: ;*putfield y {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@9 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@52 (line 426)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900febd8: 0c4c 896c | 2468 458d | 5008 4489 | 1424 458d | 5807 4489 | 5c24 0445 | 8d50 0644 | 8954 2408 
   2.00%    0x00007591900febf8: 458d 5005 | 4489 5424 | 0c45 8d58 | 0444 895c | 2410 4489 | 4424 7041 
            0x00007591900fec10: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@8 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@11 (line 419)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900fec10: 83c0 0344 | 8944 2414 | 448b 5c24 | 7041 83c3 
            0x00007591900fec20: ;*iadd {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::getY@8 (line 12)
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@6 (line 418)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
            0x00007591900fec20: 0244 895c | 2418 8b6c 
            0x00007591900fec28: ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@33 (line 123)
            0x00007591900fec28: 2470 ffc5 | 4d3b 8fc8 | 0100 000f | 82a7 feff 
            0x00007591900fec38: ;*invokevirtual getY {reexecute=0 rethrow=0 return_oop=0}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@52 (line 426)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
                                ;   {metadata({type array int})}
            0x00007591900fec38: ff48 be98 | 4e16 2291 | 7500 00ba | 0a00 0000 
            0x00007591900fec48: ;   {runtime_call _new_array_Java}
            0x00007591900fec48: 6666 90e8 
            0x00007591900fec4c: ; ImmutableOopMap {[32]=Oop [40]=Oop [96]=Oop [104]=Oop }
                                ;*newarray {reexecute=0 rethrow=0 return_oop=1}
                                ; - org.sample.KotlinBenchmark::_010_varargArr_inter_vars@59 (line 428)
                                ; - org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub@17 (line 121)
....................................................................................................
  98.46%  <total for region 1>

....[Hottest Regions]...............................................................................
  98.46%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub, version 6, compile id 636 
   0.08%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.08%                        <unknown> 
   0.07%             libjvm.so  SpinPause 
   0.06%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.04%                [vdso]  __vdso_clock_gettime 
   0.03%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.03%             libjvm.so  G1CardSet::reset_table_scanner() 
   0.03%             libjvm.so  G1CodeRootSet::nmethods_do(NMethodClosure*) const 
   0.03%             libjvm.so  G1ConcurrentMark::clear_statistics(G1HeapRegion*) 
   0.02%             libjvm.so  Rdtsc::elapsed_counter() 
   0.02%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.02%             libjvm.so  G1CodeRootSet::length() const 
   0.02%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.02%             libjvm.so  xmlStream::write_text(char const*, unsigned long) [clone .part.0] 
   0.02%             libjvm.so  defaultStream::write(char const*, unsigned long) 
   0.01%             libjvm.so  G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker() 
   0.01%                        <unknown> 
   0.88%  <...other 268 warm regions...>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  98.46%           c2, level 4  org.sample.jmh_generated.KotlinBenchmark__010_varargArr_inter_vars_jmhTest::_010_varargArr_inter_vars_thrpt_jmhStub, version 6, compile id 636 
   0.29%                        <unknown> 
   0.08%             libjvm.so  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const 
   0.07%             libjvm.so  SpinPause 
   0.06%             libjvm.so  ElfSymbolTable::lookup(unsigned char*, int*, int*, int*, ElfFuncDescTable*) 
   0.04%             libc.so.6  [unknown] 
   0.04%             libjvm.so  HeapRegionClaimer::claim_region(unsigned int) 
   0.04%             libjvm.so  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(G1HeapRegion*) 
   0.04%                [vdso]  __vdso_clock_gettime 
   0.04%             libjvm.so  RelocIterator::initialize(nmethod*, unsigned char*, unsigned char*) 
   0.03%             libjvm.so  defaultStream::write(char const*, unsigned long) 
   0.03%             libjvm.so  G1CodeRootSet::nmethods_do(NMethodClosure*) const 
   0.03%             libjvm.so  G1CardSet::reset_table_scanner() 
   0.03%             libjvm.so  G1ScanCollectionSetRegionClosure::do_heap_region(G1HeapRegion*) 
   0.03%             libjvm.so  G1ConcurrentMark::clear_statistics(G1HeapRegion*) 
   0.02%             libjvm.so  void WeakProcessor::Task::work<G1STWIsAliveClosure, G1KeepAliveClosure>(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) 
   0.02%             libjvm.so  xmlStream::write_text(char const*, unsigned long) [clone .part.0] 
   0.02%             libjvm.so  Rdtsc::elapsed_counter() 
   0.02%             libjvm.so  G1CodeRootSet::reset_table_scanner() 
   0.02%             libjvm.so  G1CodeRootSet::length() const 
   0.61%  <...other 168 warm methods...>
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  98.46%           c2, level 4
   1.07%             libjvm.so
   0.29%                      
   0.13%             libc.so.6
   0.04%                [vdso]
   0.01%                kernel
   0.01%  ld-linux-x86-64.so.2
   0.00%           interpreter
   0.00%        perf-16587.map
....................................................................................................
 100.00%  <totals>



# Run complete. Total time: 00:05:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt          Score         Error  Units
KotlinBenchmark._010_arr10                     thrpt    5  119983372.680 Â±  503808.146  ops/s
KotlinBenchmark._010_arr10:asm                 thrpt                 NaN                  ---
KotlinBenchmark._010_varargArr                 thrpt    5  160757734.520 Â± 1847638.582  ops/s
KotlinBenchmark._010_varargArr:asm             thrpt                 NaN                  ---
KotlinBenchmark._010_varargArr_inter_vars      thrpt    5  120021826.123 Â± 1252572.046  ops/s
KotlinBenchmark._010_varargArr_inter_vars:asm  thrpt                 NaN                  ---
