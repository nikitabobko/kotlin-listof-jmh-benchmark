# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_listOf_vararg

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 118660280,161 ops/s
# Warmup Iteration   2: 121507966,820 ops/s
# Warmup Iteration   3: 109580172,387 ops/s
# Warmup Iteration   4: 109568397,695 ops/s
# Warmup Iteration   5: 109480037,389 ops/s
Iteration   1: 109385969,161 ops/s
Iteration   2: 109476011,503 ops/s
Iteration   3: 109596436,261 ops/s
Iteration   4: 109544048,173 ops/s
Iteration   5: 109706066,669 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_listOf_vararg":
  109541706,354 ±(99.9%) 466011,630 ops/s [Average]
  (min, avg, max) = (109385969,161, 109541706,354, 109706066,669), stdev = 121021,740
  CI (99.9%): [109075694,723, 110007717,984] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars

# Run progress: 33,33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 168765703,571 ops/s
# Warmup Iteration   2: 175425334,504 ops/s
# Warmup Iteration   3: 174719837,446 ops/s
# Warmup Iteration   4: 175278484,654 ops/s
# Warmup Iteration   5: 174926575,715 ops/s
Iteration   1: 175324429,105 ops/s
Iteration   2: 175110905,735 ops/s
Iteration   3: 173580617,399 ops/s
Iteration   4: 171461670,093 ops/s
Iteration   5: 174213491,743 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars":
  173938222,815 ±(99.9%) 5975859,803 ops/s [Average]
  (min, avg, max) = (171461670,093, 173938222,815, 175324429,105), stdev = 1551911,814
  CI (99.9%): [167962363,012, 179914082,618] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23.0.1, OpenJDK 64-Bit Server VM, 23.0.1+8-FR
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/23.0.1-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_myListOf10

# Run progress: 66,67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 171500361,055 ops/s
# Warmup Iteration   2: 175575139,850 ops/s
# Warmup Iteration   3: 175634988,683 ops/s
# Warmup Iteration   4: 175897355,532 ops/s
# Warmup Iteration   5: 175114337,599 ops/s
Iteration   1: 175988763,528 ops/s
Iteration   2: 175583039,385 ops/s
Iteration   3: 175999533,775 ops/s
Iteration   4: 175573555,392 ops/s
Iteration   5: 175715482,513 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_myListOf10":
  175772074,918 ±(99.9%) 810097,652 ops/s [Average]
  (min, avg, max) = (175573555,392, 175772074,918, 175999533,775), stdev = 210379,788
  CI (99.9%): [174961977,267, 176582172,570] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt          Score         Error  Units
KotlinBenchmark._010_kotlin_listOf_vararg             thrpt    5  109541706,354 ±  466011,630  ops/s
KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars  thrpt    5  173938222,815 ± 5975859,803  ops/s
KotlinBenchmark._010_kotlin_myListOf10                thrpt    5  175772074,918 ±  810097,652  ops/s
