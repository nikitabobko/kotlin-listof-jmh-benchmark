# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_listOf_vararg

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 121198997,453 ops/s
# Warmup Iteration   2: 120454033,808 ops/s
# Warmup Iteration   3: 107630394,032 ops/s
# Warmup Iteration   4: 107656567,696 ops/s
# Warmup Iteration   5: 109178547,333 ops/s
Iteration   1: 109403230,458 ops/s
Iteration   2: 109424405,842 ops/s
Iteration   3: 109379514,664 ops/s
Iteration   4: 109414739,880 ops/s
Iteration   5: 109302087,253 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_listOf_vararg":
  109384795,619 ±(99.9%) 189368,253 ops/s [Average]
  (min, avg, max) = (109302087,253, 109384795,619, 109424405,842), stdev = 49178,334
  CI (99.9%): [109195427,366, 109574163,873] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars

# Run progress: 33,33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 174406460,049 ops/s
# Warmup Iteration   2: 176961169,805 ops/s
# Warmup Iteration   3: 176330031,045 ops/s
# Warmup Iteration   4: 175833879,270 ops/s
# Warmup Iteration   5: 176072242,448 ops/s
Iteration   1: 176113388,815 ops/s
Iteration   2: 176037854,588 ops/s
Iteration   3: 175782382,858 ops/s
Iteration   4: 176068241,183 ops/s
Iteration   5: 175937702,943 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars":
  175987914,077 ±(99.9%) 507404,161 ops/s [Average]
  (min, avg, max) = (175782382,858, 175987914,077, 176113388,815), stdev = 131771,249
  CI (99.9%): [175480509,917, 176495318,238] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_kotlin_myListOf10

# Run progress: 66,67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 173564550,049 ops/s
# Warmup Iteration   2: 176248649,382 ops/s
# Warmup Iteration   3: 174739772,879 ops/s
# Warmup Iteration   4: 175559373,628 ops/s
# Warmup Iteration   5: 175672546,020 ops/s
Iteration   1: 175436740,571 ops/s
Iteration   2: 174115974,971 ops/s
Iteration   3: 172988293,011 ops/s
Iteration   4: 173007793,127 ops/s
Iteration   5: 174420347,884 ops/s


Result "org.sample.KotlinBenchmark._010_kotlin_myListOf10":
  173993829,913 ±(99.9%) 3974846,274 ops/s [Average]
  (min, avg, max) = (172988293,011, 173993829,913, 175436740,571), stdev = 1032254,955
  CI (99.9%): [170018983,639, 177968676,187] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                              Mode  Cnt          Score         Error  Units
KotlinBenchmark._010_kotlin_listOf_vararg_inter_vars  thrpt    5  175987914,077 ±  507404,161  ops/s
KotlinBenchmark._010_kotlin_myListOf10                thrpt    5  173993829,913 ± 3974846,274  ops/s
KotlinBenchmark._010_kotlin_listOf_vararg             thrpt    5  109384795,619 ±  189368,253  ops/s
