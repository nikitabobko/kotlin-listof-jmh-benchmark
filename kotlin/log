# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark.baseline

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 3590122449,504 ops/s
# Warmup Iteration   2: 3617059583,546 ops/s
# Warmup Iteration   3: 3614067110,332 ops/s
# Warmup Iteration   4: 2620359453,264 ops/s
# Warmup Iteration   5: 2564336963,080 ops/s
Iteration   1: 3617024716,585 ops/s
Iteration   2: 2563093512,289 ops/s
Iteration   3: 3618593774,493 ops/s
Iteration   4: 3621990019,374 ops/s
Iteration   5: 3620037349,535 ops/s


Result "org.sample.KotlinBenchmark.baseline":
  3408147874,455 ±(99.9%) 1819056886,975 ops/s [Average]
  (min, avg, max) = (2563093512,289, 3408147874,455, 3621990019,374), stdev = 472403296,885
  CI (99.9%): [1589090987,480, 5227204761,430] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark.kotlinListOfVararg100

# Run progress: 50,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 12038915,805 ops/s
# Warmup Iteration   2: 12142400,779 ops/s
# Warmup Iteration   3: 12162348,017 ops/s
# Warmup Iteration   4: 12175664,979 ops/s
# Warmup Iteration   5: 12174356,501 ops/s
Iteration   1: 12172108,769 ops/s
Iteration   2: 12176596,213 ops/s
Iteration   3: 12168027,548 ops/s
Iteration   4: 12171965,635 ops/s
Iteration   5: 12160331,955 ops/s


Result "org.sample.KotlinBenchmark.kotlinListOfVararg100":
  12169806,024 ±(99.9%) 23501,090 ops/s [Average]
  (min, avg, max) = (12160331,955, 12169806,024, 12176596,213), stdev = 6103,158
  CI (99.9%): [12146304,934, 12193307,114] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt           Score            Error  Units
KotlinBenchmark.baseline               thrpt    5  3408147874,455 ± 1819056886,975  ops/s
KotlinBenchmark.kotlinListOfVararg100  thrpt    5    12169806,024 ±      23501,090  ops/s
