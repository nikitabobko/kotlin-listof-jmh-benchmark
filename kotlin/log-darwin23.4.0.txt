# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._050_arrayOf

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 199403063,587 ops/s
# Warmup Iteration   2: 203949780,840 ops/s
# Warmup Iteration   3: 204010440,033 ops/s
# Warmup Iteration   4: 203980862,186 ops/s
# Warmup Iteration   5: 203935569,448 ops/s
Iteration   1: 204018727,928 ops/s
Iteration   2: 204048279,648 ops/s
Iteration   3: 203992577,675 ops/s
Iteration   4: 204078502,382 ops/s
Iteration   5: 203746718,659 ops/s


Result "org.sample.KotlinBenchmark._050_arrayOf":
  203976961,258 ±(99.9%) 510834,375 ops/s [Average]
  (min, avg, max) = (203746718,659, 203976961,258, 204078502,382), stdev = 132662,065
  CI (99.9%): [203466126,883, 204487795,634] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._050_arrayOf_interVars

# Run progress: 50,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 621236020,386 ops/s
# Warmup Iteration   2: 649459732,173 ops/s
# Warmup Iteration   3: 650457375,797 ops/s
# Warmup Iteration   4: 649273861,145 ops/s
# Warmup Iteration   5: 652398501,548 ops/s
Iteration   1: 651252979,829 ops/s
Iteration   2: 651000187,193 ops/s
Iteration   3: 651422447,299 ops/s
Iteration   4: 651100173,531 ops/s
Iteration   5: 637140738,939 ops/s


Result "org.sample.KotlinBenchmark._050_arrayOf_interVars":
  648383305,358 ±(99.9%) 24208285,001 ops/s [Average]
  (min, avg, max) = (637140738,939, 648383305,358, 651422447,299), stdev = 6286814,738
  CI (99.9%): [624175020,357, 672591590,359] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                Mode  Cnt          Score          Error  Units
KotlinBenchmark._050_arrayOf            thrpt    5  203976961,258 ±   510834,375  ops/s
KotlinBenchmark._050_arrayOf_interVars  thrpt    5  648383305,358 ± 24208285,001  ops/s
