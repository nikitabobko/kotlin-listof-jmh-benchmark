# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_arr10

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 189757785,550 ops/s
# Warmup Iteration   2: 191360093,278 ops/s
# Warmup Iteration   3: 292095742,166 ops/s
# Warmup Iteration   4: 291460804,294 ops/s
# Warmup Iteration   5: 290727271,900 ops/s
Iteration   1: 291574534,167 ops/s
Iteration   2: 290416117,762 ops/s
Iteration   3: 291382665,660 ops/s
Iteration   4: 290046245,547 ops/s
Iteration   5: 290437248,522 ops/s


Result "org.sample.KotlinBenchmark._010_arr10":
  290771362,332 ±(99.9%) 2570432,344 ops/s [Average]
  (min, avg, max) = (290046245,547, 290771362,332, 291574534,167), stdev = 667533,117
  CI (99.9%): [288200929,988, 293341794,675] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_varargArr

# Run progress: 33,33% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 245689095,530 ops/s
# Warmup Iteration   2: 251496975,746 ops/s
# Warmup Iteration   3: 252260907,457 ops/s
# Warmup Iteration   4: 252677995,357 ops/s
# Warmup Iteration   5: 252693973,953 ops/s
Iteration   1: 252958016,654 ops/s
Iteration   2: 252004731,846 ops/s
Iteration   3: 251342360,532 ops/s
Iteration   4: 251799524,451 ops/s
Iteration   5: 252385353,455 ops/s


Result "org.sample.KotlinBenchmark._010_varargArr":
  252097997,388 ±(99.9%) 2350926,335 ops/s [Average]
  (min, avg, max) = (251342360,532, 252097997,388, 252958016,654), stdev = 610528,103
  CI (99.9%): [249747071,053, 254448923,722] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_varargArr_inter_vars

# Run progress: 66,67% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 189882160,862 ops/s
# Warmup Iteration   2: 190713705,972 ops/s
# Warmup Iteration   3: 290676153,365 ops/s
# Warmup Iteration   4: 290364127,265 ops/s
# Warmup Iteration   5: 289736915,579 ops/s
Iteration   1: 290987345,549 ops/s
Iteration   2: 290447626,270 ops/s
Iteration   3: 290607157,733 ops/s
Iteration   4: 290325336,373 ops/s
Iteration   5: 290956626,773 ops/s


Result "org.sample.KotlinBenchmark._010_varargArr_inter_vars":
  290664818,539 ±(99.9%) 1147015,482 ops/s [Average]
  (min, avg, max) = (290325336,373, 290664818,539, 290987345,549), stdev = 297876,278
  CI (99.9%): [289517803,057, 291811834,022] (assumes normal distribution)


# Run complete. Total time: 00:05:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                   Mode  Cnt          Score         Error  Units
KotlinBenchmark._010_arr10                 thrpt    5  290771362,332 ± 2570432,344  ops/s
KotlinBenchmark._010_varargArr             thrpt    5  252097997,388 ± 2350926,335  ops/s
KotlinBenchmark._010_varargArr_inter_vars  thrpt    5  290664818,539 ± 1147015,482  ops/s
