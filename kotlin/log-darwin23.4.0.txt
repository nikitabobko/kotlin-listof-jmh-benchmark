# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_intArrayOf

# Run progress: 0,00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 328718679,241 ops/s
# Warmup Iteration   2: 334088709,732 ops/s
# Warmup Iteration   3: 302252618,925 ops/s
# Warmup Iteration   4: 301028744,200 ops/s
# Warmup Iteration   5: 302177172,265 ops/s
Iteration   1: 301665904,227 ops/s
Iteration   2: 301570559,023 ops/s
Iteration   3: 301668091,023 ops/s
Iteration   4: 301790396,223 ops/s
Iteration   5: 301992683,557 ops/s


Result "org.sample.KotlinBenchmark._010_intArrayOf":
  301737526,810 ±(99.9%) 626039,110 ops/s [Average]
  (min, avg, max) = (301570559,023, 301737526,810, 301992683,557), stdev = 162580,369
  CI (99.9%): [301111487,701, 302363565,920] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.10, OpenJDK 64-Bit Server VM, 17.0.10+7-LTS
# VM invoker: /Users/Nikita.Bobko/.sdkman/candidates/java/17.0.10-amzn/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.sample.KotlinBenchmark._010_intArrayOf_inter_vars

# Run progress: 50,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 516310473,640 ops/s
# Warmup Iteration   2: 535099633,439 ops/s
# Warmup Iteration   3: 425777481,216 ops/s
# Warmup Iteration   4: 425768022,340 ops/s
# Warmup Iteration   5: 425349387,313 ops/s
Iteration   1: 424490882,134 ops/s
Iteration   2: 426492805,473 ops/s
Iteration   3: 424839019,441 ops/s
Iteration   4: 425598796,691 ops/s
Iteration   5: 424686153,434 ops/s


Result "org.sample.KotlinBenchmark._010_intArrayOf_inter_vars":
  425221531,435 ±(99.9%) 3178391,210 ops/s [Average]
  (min, avg, max) = (424490882,134, 425221531,435, 426492805,473), stdev = 825418,104
  CI (99.9%): [422043140,225, 428399922,644] (assumes normal distribution)


# Run complete. Total time: 00:03:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                    Mode  Cnt          Score         Error  Units
KotlinBenchmark._010_intArrayOf             thrpt    5  301737526,810 ±  626039,110  ops/s
KotlinBenchmark._010_intArrayOf_inter_vars  thrpt    5  425221531,435 ± 3178391,210  ops/s
